.TH _printf 3
.SH NAME
_printf - formatted output to stdout
.SH SYNOPSIS
.B #include <stdio.h>
.br
.I int _printf(const char *format, ...);
.SH DESCRIPTION
The
.B _printf
function is a custom implementation of the printf function, providing formatted output to the standard output stream.
.P
The
.I format
parameter is a character string composed of zero or more directives. The supported conversion specifiers include:
.P
.TP
.B c
Prints a character. The argument must be an int, and the character is printed.
.TP
.B s
Prints a string. The argument must be a pointer to a null-terminated string, and the string is printed.
.TP
.B %
Prints a percent sign. No argument is required for this specifier.
.TP
.B d, i
Prints a signed decimal integer. The argument must be an int, and the integer is printed.
.P
The function returns the number of characters printed (excluding the null byte used to end output to strings).
.SH RETURN VALUE
The number of characters printed is returned. If an error occurs, the function returns -1.
.SH SEE ALSO
.BR printf (3)
.SH NOTES
This implementation does not reproduce the buffer handling of the C library printf function. It also does not handle flag characters, field width, precision, or length modifiers.
.SH EXAMPLES
The following example demonstrates the use of _printf:
.PP
.BR
#include "main.h"
.br
int main() {
.br
.TP
.B
_printf("This is a character: %c\n", 'A');
.br
.TP
.B
_printf("This is a string: %s\n", "Hello, World!");
.br
.TP
.B
_printf("This is a percent sign: %%\n");
.br
.TP
.B
_printf("This is a signed integer: %d\n", -42);
.br
.TP
.B
_printf("This is also a signed integer: %i\n", 42);
.br
.TP
.B
return 0;
.br
.BR
.SH AUTHOR
Written by Robert Santana and Javier Ferrer.

